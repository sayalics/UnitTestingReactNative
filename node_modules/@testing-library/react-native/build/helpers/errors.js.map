{"version":3,"file":"errors.js","names":["ErrorWithStack","Error","constructor","message","callsite","captureStackTrace","createLibraryNotSupportedError","error","prepareErrorMessage","name","value","errorMessage","replace","toString","prettyFormat","min","createQueryByError","includes","copyStackTrace","target","stackTraceSource","stack","warned","printDeprecationWarning","functionName","console","warn","throwRemovedFunctionError","docsRef","throwRenamedFunctionError","newFunctionName"],"sources":["../../src/helpers/errors.ts"],"sourcesContent":["import prettyFormat from 'pretty-format';\n\nexport class ErrorWithStack extends Error {\n  constructor(message: string | undefined, callsite: Function) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, callsite);\n    }\n  }\n}\n\nexport const createLibraryNotSupportedError = (error: unknown): Error =>\n  new Error(\n    `Currently the only supported library to search by text is \"react-native\".\\n\\n${\n      error instanceof Error ? error.message : ''\n    }`\n  );\n\nexport const prepareErrorMessage = (\n  // TS states that error caught in a catch close are of type `unknown`\n  // most real cases will be `Error`, but better safe than sorry\n  error: unknown,\n  name?: string,\n  value?: unknown\n): string => {\n  let errorMessage: string;\n  if (error instanceof Error) {\n    // Strip info about custom predicate\n    errorMessage = error.message.replace(\n      / matching custom predicate[^]*/gm,\n      ''\n    );\n  } else if (error && typeof error === 'object') {\n    errorMessage = error.toString();\n  } else {\n    errorMessage = 'Caught unknown error';\n  }\n\n  if (name && value) {\n    errorMessage += ` with ${name} ${prettyFormat(value, { min: true })}`;\n  }\n  return errorMessage;\n};\n\nexport const createQueryByError = (\n  error: unknown,\n  callsite: Function\n): null => {\n  if (error instanceof Error) {\n    if (error.message.includes('No instances found')) {\n      return null;\n    }\n    throw new ErrorWithStack(error.message, callsite);\n  }\n\n  throw new ErrorWithStack(\n    // generic refining of `unknown` is very hard, you cannot do `'toString' in error` or anything like that\n    // Converting as any with extra safe optional chaining will do the job just as well\n    `Query: caught unknown error type: ${typeof error}, value: ${(\n      error as any\n    )?.toString?.()}`,\n    callsite\n  );\n};\n\nexport function copyStackTrace(target: unknown, stackTraceSource: Error) {\n  if (target instanceof Error && stackTraceSource.stack) {\n    target.stack = stackTraceSource.stack.replace(\n      stackTraceSource.message,\n      target.message\n    );\n  }\n}\n\nconst warned: { [functionName: string]: boolean } = {};\n\nexport function printDeprecationWarning(functionName: string) {\n  if (warned[functionName]) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn(`\n  Deprecation Warning:\n  Use of ${functionName} is not recommended and will be deleted in future versions of @testing-library/react-native.\n  `);\n\n  warned[functionName] = true;\n}\n\nexport function throwRemovedFunctionError(\n  functionName: string,\n  docsRef: string\n) {\n  throw new Error(\n    `\"${functionName}\" has been removed.\\n\\nPlease consult: https://callstack.github.io/react-native-testing-library/docs/${docsRef}`\n  );\n}\n\nexport function throwRenamedFunctionError(\n  functionName: string,\n  newFunctionName: string\n) {\n  throw new ErrorWithStack(\n    `The \"${functionName}\" function has been renamed to \"${newFunctionName}\". Please replace all occurrences.`,\n    throwRenamedFunctionError\n  );\n}\n"],"mappings":";;;;;;;;;;;;AAAA;;;;AAEO,MAAMA,cAAN,SAA6BC,KAA7B,CAAmC;EACxCC,WAAW,CAACC,OAAD,EAA8BC,QAA9B,EAAkD;IAC3D,MAAMD,OAAN;;IACA,IAAIF,KAAK,CAACI,iBAAV,EAA6B;MAC3BJ,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8BD,QAA9B;IACD;EACF;;AANuC;;;;AASnC,MAAME,8BAA8B,GAAIC,KAAD,IAC5C,IAAIN,KAAJ,CACG,gFACCM,KAAK,YAAYN,KAAjB,GAAyBM,KAAK,CAACJ,OAA/B,GAAyC,EAC1C,EAHH,CADK;;;;AAOA,MAAMK,mBAAmB,GAAG,CAGjCD,KAHiC,EAIjCE,IAJiC,EAKjCC,KALiC,KAMtB;EACX,IAAIC,YAAJ;;EACA,IAAIJ,KAAK,YAAYN,KAArB,EAA4B;IAC1B;IACAU,YAAY,GAAGJ,KAAK,CAACJ,OAAN,CAAcS,OAAd,CACb,kCADa,EAEb,EAFa,CAAf;EAID,CAND,MAMO,IAAIL,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;IAC7CI,YAAY,GAAGJ,KAAK,CAACM,QAAN,EAAf;EACD,CAFM,MAEA;IACLF,YAAY,GAAG,sBAAf;EACD;;EAED,IAAIF,IAAI,IAAIC,KAAZ,EAAmB;IACjBC,YAAY,IAAK,SAAQF,IAAK,IAAG,IAAAK,qBAAA,EAAaJ,KAAb,EAAoB;MAAEK,GAAG,EAAE;IAAP,CAApB,CAAmC,EAApE;EACD;;EACD,OAAOJ,YAAP;AACD,CAxBM;;;;AA0BA,MAAMK,kBAAkB,GAAG,CAChCT,KADgC,EAEhCH,QAFgC,KAGvB;EACT,IAAIG,KAAK,YAAYN,KAArB,EAA4B;IAC1B,IAAIM,KAAK,CAACJ,OAAN,CAAcc,QAAd,CAAuB,oBAAvB,CAAJ,EAAkD;MAChD,OAAO,IAAP;IACD;;IACD,MAAM,IAAIjB,cAAJ,CAAmBO,KAAK,CAACJ,OAAzB,EAAkCC,QAAlC,CAAN;EACD;;EAED,MAAM,IAAIJ,cAAJ,EACJ;EACA;EACC,qCAAoC,OAAOO,KAAM,YAChDA,KAD2D,EAE1DM,QAF0D,IAE7C,EALZ,EAMJT,QANI,CAAN;AAQD,CAnBM;;;;AAqBA,SAASc,cAAT,CAAwBC,MAAxB,EAAyCC,gBAAzC,EAAkE;EACvE,IAAID,MAAM,YAAYlB,KAAlB,IAA2BmB,gBAAgB,CAACC,KAAhD,EAAuD;IACrDF,MAAM,CAACE,KAAP,GAAeD,gBAAgB,CAACC,KAAjB,CAAuBT,OAAvB,CACbQ,gBAAgB,CAACjB,OADJ,EAEbgB,MAAM,CAAChB,OAFM,CAAf;EAID;AACF;;AAED,MAAMmB,MAA2C,GAAG,EAApD;;AAEO,SAASC,uBAAT,CAAiCC,YAAjC,EAAuD;EAC5D,IAAIF,MAAM,CAACE,YAAD,CAAV,EAA0B;IACxB;EACD,CAH2D,CAK5D;;;EACAC,OAAO,CAACC,IAAR,CAAc;AAChB;AACA,WAAWF,YAAa;AACxB,GAHE;EAKAF,MAAM,CAACE,YAAD,CAAN,GAAuB,IAAvB;AACD;;AAEM,SAASG,yBAAT,CACLH,YADK,EAELI,OAFK,EAGL;EACA,MAAM,IAAI3B,KAAJ,CACH,IAAGuB,YAAa,wGAAuGI,OAAQ,EAD5H,CAAN;AAGD;;AAEM,SAASC,yBAAT,CACLL,YADK,EAELM,eAFK,EAGL;EACA,MAAM,IAAI9B,cAAJ,CACH,QAAOwB,YAAa,mCAAkCM,eAAgB,oCADnE,EAEJD,yBAFI,CAAN;AAID"}
{"version":3,"file":"text.js","names":["getChildrenAsText","children","TextComponent","textContent","React","Children","forEach","child","push","toString","props","filterNodeByType","Fragment","getNodeByText","node","text","options","Text","require","isTextComponent","textChildren","textToTest","join","exact","normalizer","matches","error","createLibraryNotSupportedError","queryAllByText","instance","queryAllByTextFn","results","findAll","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","makeQueries","bindByTextQueries","getByText","getAllByText","queryByText","findByText","findAllByText"],"sources":["../../src/queries/text.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport * as React from 'react';\nimport { createLibraryNotSupportedError } from '../helpers/errors';\nimport { filterNodeByType } from '../helpers/filterNodeByType';\nimport { matches, TextMatch } from '../matches';\nimport type { NormalizerFn } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\n\nexport type TextMatchOptions = {\n  exact?: boolean;\n  normalizer?: NormalizerFn;\n};\n\nconst getChildrenAsText = (\n  children: React.ReactChild[],\n  TextComponent: React.ComponentType\n) => {\n  const textContent: string[] = [];\n  React.Children.forEach(children, (child) => {\n    if (typeof child === 'string') {\n      textContent.push(child);\n      return;\n    }\n\n    if (typeof child === 'number') {\n      textContent.push(child.toString());\n      return;\n    }\n\n    if (child?.props?.children) {\n      // Bail on traversing text children down the tree if current node (child)\n      // has no text. In such situations, react-test-renderer will traverse down\n      // this tree in a separate call and run this query again. As a result, the\n      // query will match the deepest text node that matches requested text.\n      if (filterNodeByType(child, TextComponent)) {\n        return;\n      }\n\n      if (filterNodeByType(child, React.Fragment)) {\n        textContent.push(\n          ...getChildrenAsText(child.props.children, TextComponent)\n        );\n      }\n    }\n  });\n\n  return textContent;\n};\n\nconst getNodeByText = (\n  node: ReactTestInstance,\n  text: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  try {\n    const { Text } = require('react-native');\n    const isTextComponent = filterNodeByType(node, Text);\n    if (isTextComponent) {\n      const textChildren = getChildrenAsText(node.props.children, Text);\n      if (textChildren) {\n        const textToTest = textChildren.join('');\n        const { exact, normalizer } = options;\n        return matches(text, textToTest, normalizer, exact);\n      }\n    }\n    return false;\n  } catch (error) {\n    throw createLibraryNotSupportedError(error);\n  }\n};\n\nconst queryAllByText = (\n  instance: ReactTestInstance\n): ((\n  text: TextMatch,\n  options?: TextMatchOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByTextFn(text, options) {\n    const results = instance.findAll((node) =>\n      getNodeByText(node, text, options)\n    );\n\n    return results;\n  };\n\nconst getMultipleError = (text: TextMatch) =>\n  `Found multiple elements with text: ${String(text)}`;\nconst getMissingError = (text: TextMatch) =>\n  `Unable to find an element with text: ${String(text)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByText,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByTextQueries = {\n  getByText: GetByQuery<TextMatch, TextMatchOptions>;\n  getAllByText: GetAllByQuery<TextMatch, TextMatchOptions>;\n  queryByText: QueryByQuery<TextMatch, TextMatchOptions>;\n  queryAllByText: QueryAllByQuery<TextMatch, TextMatchOptions>;\n  findByText: FindByQuery<TextMatch, TextMatchOptions>;\n  findAllByText: FindAllByQuery<TextMatch, TextMatchOptions>;\n};\n\nexport const bindByTextQueries = (\n  instance: ReactTestInstance\n): ByTextQueries => ({\n  getByText: getBy(instance),\n  getAllByText: getAllBy(instance),\n  queryByText: queryBy(instance),\n  queryAllByText: queryAllBy(instance),\n  findByText: findBy(instance),\n  findAllByText: findAllBy(instance),\n});\n"],"mappings":"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"}